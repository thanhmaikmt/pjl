/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainPanel.java
 *
 * Created on 15-Feb-2010, 16:32:11
 */
package redcode;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Observable;
import java.util.Observer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComponent;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.DefaultHighlighter.DefaultHighlightPainter;

/**
 *
 * @author pjl
 */
public class MainPanel extends javax.swing.JPanel {

    Machine mach;
    CodeTableModel codeModel;
    private Character inChar;
    String out = "";
    private final DefaultHighlighter hilit;
    private final DefaultHighlightPainter painter;
    final static Color HILIT_COLOR = Color.RED;
    private JPopupMenu popup;

    /** Creates new form MainPanel */
    public MainPanel(final Machine mach,URL codebase) {
        popup=makePopup(codebase);
        this.mach = mach;
        mach.setIO(new IO() {

            public void put(int x) {
                char c = (char) x;
                out = out + c;
                ioText.setText(out);
                //   System.out.println("OUT:>" + out + "<");
            }

            public Integer get() {
                if (inChar == null) {
                    statusPanel.setText("Waiting for input . . .");
                    return null;
                } else {
                    Integer ret = new Integer((int) inChar);
                    inChar = null;
                    return ret;
                }
            }
        });

        codeModel = new CodeTableModel(mach);
        initComponents();
        codeTable.setModel(codeModel);
        mach.addObserver(new Observer() {

            public void update(Observable o, Object arg) {
                codeModel.fireTableDataChanged();
                int line = mach.getPC();
                codeTable.setRowSelectionInterval(line, line);
                codeTable.scrollRectToVisible(codeTable.getCellRect(line, line, true));
                if (!mach.isRunning()) {
                    statusPanel.setText("Halted");
                    runButton.setSelected(false);
                }
                ioText.setText(out);
            }
        });


        codeTable.getColumn(codeModel.getColumnName(0)).setMinWidth(30);
        codeTable.getColumn(codeModel.getColumnName(1)).setMinWidth(220);
        sizeText.setText("" + mach.getSize());
        editPanel.setSelectionColor(Color.red);


        hilit = new DefaultHighlighter();
        painter = new DefaultHighlighter.DefaultHighlightPainter(HILIT_COLOR);
        editPanel.setHighlighter(hilit);
        editPanel.getDocument().addDocumentListener(new DocumentListener() {

            public void insertUpdate(DocumentEvent e) {
                hilit.removeAllHighlights();
            }

            public void removeUpdate(DocumentEvent e) {
                hilit.removeAllHighlights();
            }

            public void changedUpdate(DocumentEvent e) {
                hilit.removeAllHighlights();
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        editPanel = new javax.swing.JTextArea();
        stepBut = new javax.swing.JButton();
        codeTableScroll = new javax.swing.JScrollPane();
        codeTable = new javax.swing.JTable();
        loadBut = new javax.swing.JButton();
        runButton = new javax.swing.JToggleButton();
        statusPanel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        sizeText = new javax.swing.JTextField();
        ioText = new javax.swing.JTextField();
        jSlider1 = new javax.swing.JSlider();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("Editor"));

        editPanel.setColumns(4);
        editPanel.setRows(500);
        editPanel.setToolTipText("Type in redcode or load file(right mouse)");
        editPanel.setWrapStyleWord(true);
        editPanel.setAutoscrolls(true);
        editPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                editPanelMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(editPanel);

        stepBut.setText("Step");
        stepBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stepActionPerformed(evt);
            }
        });

        codeTableScroll.setBorder(javax.swing.BorderFactory.createTitledBorder("Machine"));

        codeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        codeTable.setEnabled(false);
        codeTableScroll.setViewportView(codeTable);

        loadBut.setText("Compile/Load");
        loadBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButActionPerformed(evt);
            }
        });

        runButton.setText("Run/Stop");
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        statusPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jLabel1.setText("Machine Size");

        sizeText.setText("100");
        sizeText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sizeTextActionPerformed(evt);
            }
        });

        ioText.setBackground(new java.awt.Color(255, 255, 255));
        ioText.setEditable(false);
        ioText.setToolTipText("Machine IO in this panel (click to gain focus)");
        ioText.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder("Machine IO")));
        ioText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ioTextKeyPressed(evt);
            }
        });

        jSlider1.setMajorTickSpacing(1);
        jSlider1.setMaximum(10);
        jSlider1.setMinimum(1);
        jSlider1.setMinorTickSpacing(1);
        jSlider1.setPaintLabels(true);
        jSlider1.setPaintTicks(true);
        jSlider1.setSnapToTicks(true);
        jSlider1.setValue(1);
        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });

        jLabel3.setText("speed");

        jButton1.setText("File");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(loadBut, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stepBut, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(runButton, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 467, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(49, 49, 49)
                        .addComponent(jLabel1)
                        .addGap(4, 4, 4)
                        .addComponent(sizeText, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addComponent(codeTableScroll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addComponent(ioText, javax.swing.GroupLayout.DEFAULT_SIZE, 937, Short.MAX_VALUE)
            .addComponent(statusPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 937, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(codeTableScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ioText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(sizeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel1))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(runButton)
                                .addComponent(loadBut)
                                .addComponent(stepBut)
                                .addComponent(jLabel3)
                                .addComponent(jButton1))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(36, 36, 36)
                .addComponent(statusPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void loadButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButActionPerformed
        BufferedReader reader = new BufferedReader(new StringReader(editPanel.getText()));
        //    editPanel.setCaretPosition(0);
        int i1 = -1;
        int i2 = -1;
        out = "";
        hilit.removeAllHighlights();
        try {
            mach.load(reader);
            statusPanel.setText("LOADED OK");
        } catch (RedCodeParseException ex) {


            //
            try {

                i1 = editPanel.getLineStartOffset(mach.getParseLine());
                i2 = editPanel.getLineEndOffset(mach.getParseLine());
                hilit.addHighlight(i1, i2, painter);
                //editPanel.select(i1, i2);
                //  editPanel.selectAll();
                //  editPanel.notifyAll();
            } catch (BadLocationException ex1) {
                Logger.getLogger(MainPanel.class.getName()).log(Level.SEVERE, null, ex1);
            }

            statusPanel.setText("Error at line " + mach.getParseLine() + "  :  " + ex.userString());
        }

    }//GEN-LAST:event_loadButActionPerformed

    private void stepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stepActionPerformed
        resetStatusPanel();
        try {
            mach.step();
        } catch (RedCodeParseException ex) {
            Logger.getLogger(MainPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        statusPanel.setText(mach.getStatus());
    }//GEN-LAST:event_stepActionPerformed

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        if (runButton.isSelected()) {
            statusPanel.setText("Running");
            mach.run();
        } else {
            statusPanel.setText("Stopped");
            mach.stop();
        }
    }//GEN-LAST:event_runButtonActionPerformed

    private void sizeTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sizeTextActionPerformed
        int size = Integer.parseInt(sizeText.getText());
        mach.setSize(size);
    }//GEN-LAST:event_sizeTextActionPerformed

    private void ioTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ioTextKeyPressed

        KeyEvent k = (KeyEvent) evt;
        inChar = k.getKeyChar();

    }//GEN-LAST:event_ioTextKeyPressed

    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        mach.setSpeed(jSlider1.getValue());
    }//GEN-LAST:event_jSlider1StateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        System.out.println(evt);
        JComponent c=(JComponent) evt.getSource();
        int x =c.getX()+c.getWidth()/2;
        int y =c.getY()+c.getHeight()/2;

        popup.show(this, x,y);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void editPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editPanelMousePressed
        if (evt.getButton() != MouseEvent.BUTTON3) return;
        popup.show(this, evt.getX(),evt.getY()); // TODO add your handling code here:
    }//GEN-LAST:event_editPanelMousePressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable codeTable;
    private javax.swing.JScrollPane codeTableScroll;
    private javax.swing.JTextArea editPanel;
    private javax.swing.JTextField ioText;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JButton loadBut;
    private javax.swing.JToggleButton runButton;
    private javax.swing.JTextField sizeText;
    private javax.swing.JLabel statusPanel;
    private javax.swing.JButton stepBut;
    // End of variables declaration//GEN-END:variables

    private void resetStatusPanel() {
        statusPanel.setText("");
    }

    void setEditText(String str) {
        editPanel.setText(str);
    }

    void loadFromURL(URL name) throws IOException {
        String str = "";
        BufferedReader in = new BufferedReader(
                new InputStreamReader(
                name.openStream()));

        String inputLine;

        while ((inputLine = in.readLine()) != null) {
            System.out.println(inputLine);
            str = str + inputLine + "\n";
        }

        in.close();
        setEditText(str);

    }

    JPopupMenu makePopup(URL codeBase) {

        JPopupMenu menu = new JPopupMenu();


        String fna = codeBase + "/prog";

        final URL url;
        try {
            url = new URL(fna);


            System.out.println(url);

            java.net.URLConnection con;
            con = url.openConnection();

            con.connect();

            java.io.BufferedReader in = new java.io.BufferedReader(new java.io.InputStreamReader(con.getInputStream()));
            String line;

            while ((line = in.readLine()) != null) {

                System.out.println(line);
                final JMenuItem item = new JMenuItem(line);
                menu.add(item);
                item.addActionListener(new ActionListener() {

                    public void actionPerformed(ActionEvent e) {
                        String fna = item.getActionCommand();
                        System.out.println(item.getActionCommand());
                        try {
                            loadFromURL(new URL(url.toString() + "/" + fna));
                        } catch (IOException ex) {
                            Logger.getLogger(RedcodeApplet.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                });
            }

        } catch (MalformedURLException ex) {
            Logger.getLogger(RedcodeApplet.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(RedcodeApplet.class.getName()).log(Level.SEVERE, null, ex);
        }
        // TODO overwrite start(), stop() and destroy() methods
        return menu;

    }
}
